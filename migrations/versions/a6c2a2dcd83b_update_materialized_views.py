"""update materialized views

Revision ID: a6c2a2dcd83b
Revises: af5464887bc8
Create Date: 2025-06-12 20:06:02.543418

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_materialized_view import PGMaterializedView
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'a6c2a2dcd83b'
down_revision: Union[str, None] = 'af5464887bc8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_price_ratios_usd = PGMaterializedView(
                schema="public",
                signature="price_ratios_usd",
                definition="WITH annual_prices AS (\n    SELECT\n        ac.id as area_id,\n        ac.area_code,\n        ac.area as country_name,\n        ic.item_code,\n        ic.item as item_name,\n        p.year,\n        AVG(p.value) as price\n    FROM prices p\n    JOIN area_codes ac ON p.area_code_id = ac.id\n    JOIN item_codes ic ON p.item_code_id = ic.id\n    JOIN elements e ON p.element_code_id = e.id\n    JOIN flags f ON p.flag_id = f.id\n    WHERE\n        e.element_code = '5532'  -- USD prices only\n        AND f.flag != 'I'\n        AND p.months_code = '7021'  -- Annual average\n    GROUP BY ac.id, ac.area_code, ac.area, ic.item_code, ic.item, p.year\n)\nSELECT\n    p1.area_id as country1_id,\n    p1.area_code as country1_code,\n    p1.country_name as country1,\n    p2.area_id as country2_id,\n    p2.area_code as country2_code,\n    p2.country_name as country2,\n    p1.item_code,\n    p1.item_name,\n    p1.year,\n    p1.price as price1,\n    p2.price as price2,\n    ROUND((p1.price / NULLIF(p2.price, 0))::numeric, 3) as price_ratio\nFROM annual_prices p1\nJOIN annual_prices p2\n    ON p1.year = p2.year\n    AND p1.item_code = p2.item_code\n    AND p1.area_code < p2.area_code\nWHERE p2.price > 0;  -- Avoid division by zero",
                with_data=True
            )

    op.replace_entity(public_price_ratios_usd)

    public_price_ratios_lcu = PGMaterializedView(
                schema="public",
                signature="price_ratios_lcu",
                definition="WITH annual_prices AS (\n    SELECT\n        ac.id as area_id,\n        ac.area_code,\n        ac.area as country_name,\n        ic.item_code,\n        ic.item as item_name,\n        p.year,\n        AVG(p.value) as price_lcu\n    FROM prices p\n    JOIN area_codes ac ON p.area_code_id = ac.id\n    JOIN item_codes ic ON p.item_code_id = ic.id\n    JOIN elements e ON p.element_code_id = e.id\n    JOIN flags f ON p.flag_id = f.id\n    WHERE\n        f.flag != 'I'\n        AND e.element_code = '5530'  -- LCU prices only\n        AND p.months_code = '7021'   -- Annual average\n        -- Exclude Euro countries during transition period\n        AND NOT (\n            ac.area_code IN ('11', '15', '67', '68', '79', '134', '106', '174', '203', '255', '256')\n            AND p.year BETWEEN 1999 AND 2001\n        )\n    GROUP BY ac.id, ac.area_code, ac.area, ic.item_code, ic.item, p.year\n),\nnormalized_prices AS (\n    SELECT \n        ap.*,\n        ap.price_lcu / er.value as price\n    FROM annual_prices ap\n    INNER JOIN exchange_rate er ON \n        er.year = ap.year\n        AND er.element_code_id = (SELECT id FROM elements WHERE element_code = 'LCU')\n        AND er.months_code = '7021'\n    INNER JOIN area_codes ac_er ON\n        er.area_code_id = ac_er.id \n        AND ac_er.area_code = ap.area_code\n    WHERE er.value > 0\n)\nSELECT\n    p1.area_id as country1_id,\n    p1.area_code as country1_code,\n    p1.country_name as country1,\n    p2.area_id as country2_id,\n    p2.area_code as country2_code,\n    p2.country_name as country2,\n    p1.item_code,\n    p1.item_name,\n    p1.year,\n    p1.price as price1,\n    p2.price as price2,\n    ROUND((p1.price / NULLIF(p2.price, 0))::numeric, 3) as price_ratio\nFROM normalized_prices p1\nJOIN normalized_prices p2\n    ON p1.year = p2.year\n    AND p1.item_code = p2.item_code\n    AND p1.area_code < p2.area_code\nWHERE p2.price > 0;  -- Avoid division by zero",
                with_data=True
            )

    op.replace_entity(public_price_ratios_lcu)

    public_price_details_usd = PGMaterializedView(
                schema="public",
                signature="price_details_usd",
                definition="SELECT \n    ac.id as area_id,\n    ac.area as area_name,\n    ac.area_code,\n    p.year,\n    p.value as price,\n    p.unit,\n    ic.item as item_name,\n    ic.item_code,\n    ic.id as item_id\nFROM prices p\nJOIN item_codes ic ON ic.id = p.item_code_id\nJOIN area_codes ac ON ac.id = p.area_code_id\nJOIN elements e ON e.id = p.element_code_id\nJOIN flags f ON f.id = p.flag_id\nWHERE \n    e.element_code = '5532'  -- USD prices\n    AND f.flag != 'I'\n    AND p.months_code = '7021'  -- Annual prices only\nORDER BY ac.area_code, p.year",
                with_data=True
            )

    op.replace_entity(public_price_details_usd)

    public_price_details_lcu = PGMaterializedView(
                schema="public",
                signature="price_details_lcu",
                definition="SELECT \n    ac.id as area_id,\n    ac.area as area_name,\n    ac.area_code,\n    p.year,\n    p.value / er.value as price,  -- Convert LCU to USD\n    'USD' as unit,                 -- Converted to USD\n    ic.item as item_name,\n    ic.item_code,\n    ic.id as item_id\nFROM prices p\nJOIN item_codes ic ON ic.id = p.item_code_id\nJOIN area_codes ac ON ac.id = p.area_code_id\nJOIN elements e ON e.id = p.element_code_id\nJOIN flags f ON f.id = p.flag_id\n-- Join exchange rate via area_code string matching\nJOIN area_codes ac_er ON ac_er.area_code = ac.area_code\nJOIN exchange_rate er ON \n    er.area_code_id = ac_er.id\n    AND er.year = p.year\n    AND er.months_code = '7021'  -- Annual rates\n    AND er.element_code_id = (SELECT id FROM elements WHERE element_code = 'LCU')\nWHERE \n    e.element_code = '5530'  -- LCU prices\n    AND f.flag != 'I'\n    AND p.months_code = '7021'  -- Annual prices only\n    AND er.value > 0         -- Valid exchange rates\n    -- Exclude Euro countries during transition period\n    AND NOT (\n        ac.area_code IN ('11', '15', '67', '68', '79', '134', '106', '174', '203', '255', '256')\n        AND p.year BETWEEN 1999 AND 2001\n    )\nORDER BY ac.area_code, p.year",
                with_data=True
            )

    op.replace_entity(public_price_details_lcu)

    public_item_stats_lcu = PGMaterializedView(
                schema="public",
                signature="item_stats_lcu",
                definition="SELECT \n    ic.id,\n    ic.item as name,\n    ic.item_code,\n    ic.item_code_cpc as cpc_code,\n    COUNT(DISTINCT p.id) as price_points,\n    COUNT(DISTINCT p.area_code_id) as countries_with_data,\n    COUNT(DISTINCT p.year) as years_with_data,\n    MIN(p.year) as earliest_year,\n    MAX(p.year) as latest_year,\n    -- Average data points per country (indicates data density)\n    (COUNT(p.id)::numeric / COUNT(DISTINCT p.area_code_id)) as avg_points_per_country\nFROM item_codes ic\nJOIN prices p ON ic.id = p.item_code_id\nJOIN elements e ON e.id = p.element_code_id\nJOIN flags f ON f.id = p.flag_id\nWHERE \n    e.element_code = '5530'  -- LCU prices\n    AND ic.source_dataset = 'prices'\n    AND f.flag != 'I'\n    AND p.year >= 1990\nGROUP BY ic.id, ic.item, ic.item_code, ic.item_code_cpc\nHAVING \n    COUNT(DISTINCT p.area_code_id) >= 10  -- At least 10 countries\n    AND COUNT(DISTINCT p.year) >= 10       -- At least 10 years of data\nORDER BY \n    COUNT(DISTINCT p.area_code_id) DESC,  -- Most countries first\n    COUNT(DISTINCT p.year) DESC,          -- Then most years\n    COUNT(p.id) DESC;                     -- Then most data points",
                with_data=True
            )

    op.replace_entity(public_item_stats_lcu)

    public_item_stats_usd = PGMaterializedView(
                schema="public",
                signature="item_stats_usd",
                definition="SELECT \n    ic.id,\n    ic.item as name,\n    ic.item_code,\n    ic.item_code_cpc as cpc_code,\n    COUNT(DISTINCT p.id) as price_points,\n    COUNT(DISTINCT p.area_code_id) as countries_with_data,\n    COUNT(DISTINCT p.year) as years_with_data,\n    MIN(p.year) as earliest_year,\n    MAX(p.year) as latest_year,\n    -- Average data points per country (indicates data density)\n    (COUNT(p.id)::numeric / COUNT(DISTINCT p.area_code_id)) as avg_points_per_country\nFROM item_codes ic\nJOIN prices p ON ic.id = p.item_code_id\nJOIN elements e ON e.id = p.element_code_id\nJOIN flags f ON f.id = p.flag_id\nWHERE \n    e.element_code = '5532'  -- USD prices\n    AND ic.source_dataset = 'prices'\n    AND f.flag != 'I'\n    AND p.year >= 1990\nGROUP BY ic.id, ic.item, ic.item_code, ic.item_code_cpc\nHAVING \n    COUNT(DISTINCT p.area_code_id) >= 10  -- At least 10 countries\n    AND COUNT(DISTINCT p.year) >= 10       -- At least 5 years of data\nORDER BY \n    COUNT(DISTINCT p.area_code_id) DESC,  -- Most countries first\n    COUNT(DISTINCT p.year) DESC,          -- Then most years\n    COUNT(p.id) DESC;                     -- Then most data points",
                with_data=True
            )

    op.replace_entity(public_item_stats_usd)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_item_stats_usd = PGMaterializedView(
                schema="public",
                signature="item_stats_usd",
                definition="SELECT ic.id,\n    ic.item AS name,\n    ic.item_code,\n    ic.item_code_cpc AS cpc_code,\n    count(DISTINCT p.id) AS price_points,\n    count(DISTINCT p.area_code_id) AS countries_with_data,\n    count(DISTINCT p.year) AS years_with_data,\n    min(p.year) AS earliest_year,\n    max(p.year) AS latest_year,\n    ((count(p.id))::numeric / (count(DISTINCT p.area_code_id))::numeric) AS avg_points_per_country\n   FROM (((item_codes ic\n     JOIN prices p ON ((ic.id = p.item_code_id)))\n     JOIN elements e ON ((e.id = p.element_code_id)))\n     JOIN flags f ON ((f.id = p.flag_id)))\n  WHERE (((e.element_code)::text = '5532'::text) AND ((ic.source_dataset)::text = 'prices'::text) AND ((f.flag)::text = 'A'::text) AND (p.year >= 1990))\n  GROUP BY ic.id, ic.item, ic.item_code, ic.item_code_cpc\n HAVING ((count(DISTINCT p.area_code_id) >= 10) AND (count(DISTINCT p.year) >= 10))\n  ORDER BY (count(DISTINCT p.area_code_id)) DESC, (count(DISTINCT p.year)) DESC, (count(p.id)) DESC",
                with_data=True
            )

    op.replace_entity(public_item_stats_usd)
    public_item_stats_lcu = PGMaterializedView(
                schema="public",
                signature="item_stats_lcu",
                definition="SELECT ic.id,\n    ic.item AS name,\n    ic.item_code,\n    ic.item_code_cpc AS cpc_code,\n    count(DISTINCT p.id) AS price_points,\n    count(DISTINCT p.area_code_id) AS countries_with_data,\n    count(DISTINCT p.year) AS years_with_data,\n    min(p.year) AS earliest_year,\n    max(p.year) AS latest_year,\n    ((count(p.id))::numeric / (count(DISTINCT p.area_code_id))::numeric) AS avg_points_per_country\n   FROM (((item_codes ic\n     JOIN prices p ON ((ic.id = p.item_code_id)))\n     JOIN elements e ON ((e.id = p.element_code_id)))\n     JOIN flags f ON ((f.id = p.flag_id)))\n  WHERE (((e.element_code)::text = '5530'::text) AND ((ic.source_dataset)::text = 'prices'::text) AND ((f.flag)::text = 'A'::text) AND (p.year >= 1990))\n  GROUP BY ic.id, ic.item, ic.item_code, ic.item_code_cpc\n HAVING ((count(DISTINCT p.area_code_id) >= 10) AND (count(DISTINCT p.year) >= 10))\n  ORDER BY (count(DISTINCT p.area_code_id)) DESC, (count(DISTINCT p.year)) DESC, (count(p.id)) DESC",
                with_data=True
            )

    op.replace_entity(public_item_stats_lcu)
    public_price_details_lcu = PGMaterializedView(
                schema="public",
                signature="price_details_lcu",
                definition="SELECT ac.id AS area_id,\n    ac.area AS area_name,\n    ac.area_code,\n    p.year,\n    (p.value / er.value) AS price,\n    'USD'::text AS unit,\n    ic.item AS item_name,\n    ic.item_code,\n    ic.id AS item_id\n   FROM ((((((prices p\n     JOIN item_codes ic ON ((ic.id = p.item_code_id)))\n     JOIN area_codes ac ON ((ac.id = p.area_code_id)))\n     JOIN elements e ON ((e.id = p.element_code_id)))\n     JOIN flags f ON ((f.id = p.flag_id)))\n     JOIN area_codes ac_er ON (((ac_er.area_code)::text = (ac.area_code)::text)))\n     JOIN exchange_rate er ON (((er.area_code_id = ac_er.id) AND (er.year = p.year) AND ((er.months_code)::text = '7021'::text) AND (er.element_code_id = ( SELECT elements.id\n           FROM elements\n          WHERE ((elements.element_code)::text = 'LCU'::text))))))\n  WHERE (((e.element_code)::text = '5530'::text) AND ((f.flag)::text = 'A'::text) AND ((p.months_code)::text = '7021'::text) AND (er.value > (0)::double precision) AND (NOT (((ac.area_code)::text = ANY ((ARRAY['11'::character varying, '15'::character varying, '67'::character varying, '68'::character varying, '79'::character varying, '134'::character varying, '106'::character varying, '174'::character varying, '203'::character varying, '255'::character varying, '256'::character varying])::text[])) AND ((p.year >= 1999) AND (p.year <= 2001)))))\n  ORDER BY ac.area_code, p.year",
                with_data=True
            )

    op.replace_entity(public_price_details_lcu)
    public_price_details_usd = PGMaterializedView(
                schema="public",
                signature="price_details_usd",
                definition="SELECT ac.id AS area_id,\n    ac.area AS area_name,\n    ac.area_code,\n    p.year,\n    p.value AS price,\n    p.unit,\n    ic.item AS item_name,\n    ic.item_code,\n    ic.id AS item_id\n   FROM ((((prices p\n     JOIN item_codes ic ON ((ic.id = p.item_code_id)))\n     JOIN area_codes ac ON ((ac.id = p.area_code_id)))\n     JOIN elements e ON ((e.id = p.element_code_id)))\n     JOIN flags f ON ((f.id = p.flag_id)))\n  WHERE (((e.element_code)::text = '5532'::text) AND ((f.flag)::text = 'A'::text) AND ((p.months_code)::text = '7021'::text))\n  ORDER BY ac.area_code, p.year",
                with_data=True
            )

    op.replace_entity(public_price_details_usd)
    public_price_ratios_lcu = PGMaterializedView(
                schema="public",
                signature="price_ratios_lcu",
                definition="WITH annual_prices AS (\n         SELECT ac.id AS area_id,\n            ac.area_code,\n            ac.area AS country_name,\n            ic.item_code,\n            ic.item AS item_name,\n            p.year,\n            avg(p.value) AS price_lcu\n           FROM ((((prices p\n             JOIN area_codes ac ON ((p.area_code_id = ac.id)))\n             JOIN item_codes ic ON ((p.item_code_id = ic.id)))\n             JOIN elements e ON ((p.element_code_id = e.id)))\n             JOIN flags f ON ((p.flag_id = f.id)))\n          WHERE (((f.flag)::text = 'A'::text) AND ((e.element_code)::text = '5530'::text) AND ((p.months_code)::text = '7021'::text))\n          GROUP BY ac.id, ac.area_code, ac.area, ic.item_code, ic.item, p.year\n        ), normalized_prices AS (\n         SELECT ap.area_id,\n            ap.area_code,\n            ap.country_name,\n            ap.item_code,\n            ap.item_name,\n            ap.year,\n            ap.price_lcu,\n            (ap.price_lcu / er.value) AS price\n           FROM ((annual_prices ap\n             JOIN exchange_rate er ON (((er.year = ap.year) AND (er.element_code_id = ( SELECT elements.id\n                   FROM elements\n                  WHERE ((elements.element_code)::text = 'LCU'::text))) AND ((er.months_code)::text = '7021'::text))))\n             JOIN area_codes ac_er ON (((er.area_code_id = ac_er.id) AND ((ac_er.area_code)::text = (ap.area_code)::text))))\n          WHERE (er.value > (0)::double precision)\n        ), price_ratios AS (\n         SELECT p1.area_id AS country1_id,\n            p1.area_code AS country1_code,\n            p1.country_name AS country1,\n            p2.area_id AS country2_id,\n            p2.area_code AS country2_code,\n            p2.country_name AS country2,\n            p1.item_code,\n            p1.item_name,\n            p1.year,\n            p1.price AS price1,\n            p2.price AS price2,\n            (p1.price / NULLIF(p2.price, (0)::double precision)) AS price_ratio\n           FROM (normalized_prices p1\n             JOIN normalized_prices p2 ON (((p1.year = p2.year) AND ((p1.item_code)::text = (p2.item_code)::text) AND ((p1.area_code)::text < (p2.area_code)::text))))\n        )\n SELECT country1,\n    country2,\n    country1_id,\n    country2_id,\n    country1_code,\n    country2_code,\n    item_code,\n    item_name,\n    json_agg(json_build_object('year', year, 'price1', price1, 'price2', price2, 'ratio', round((price_ratio)::numeric, 3)) ORDER BY year) AS time_series,\n    count(*) AS years_compared,\n    round((avg(price_ratio))::numeric, 3) AS avg_ratio,\n    round((stddev(price_ratio))::numeric, 3) AS ratio_volatility,\n    round((min(price_ratio))::numeric, 3) AS min_ratio,\n    round((max(price_ratio))::numeric, 3) AS max_ratio,\n        CASE\n            WHEN (stddev(price_ratio) < (0.1)::double precision) THEN 'high'::text\n            WHEN (stddev(price_ratio) < (0.2)::double precision) THEN 'moderate'::text\n            WHEN (stddev(price_ratio) < (0.3)::double precision) THEN 'low'::text\n            ELSE 'none'::text\n        END AS integration_level\n   FROM price_ratios\n  GROUP BY country1, country2, country1_id, country2_id, country1_code, country2_code, item_code, item_name",
                with_data=True
            )

    op.replace_entity(public_price_ratios_lcu)
    public_price_ratios_usd = PGMaterializedView(
                schema="public",
                signature="price_ratios_usd",
                definition="WITH annual_prices AS (\n         SELECT ac.id AS area_id,\n            ac.area_code,\n            ac.area AS country_name,\n            ic.item_code,\n            ic.item AS item_name,\n            p.year,\n            avg(p.value) AS price\n           FROM ((((prices p\n             JOIN area_codes ac ON ((p.area_code_id = ac.id)))\n             JOIN item_codes ic ON ((p.item_code_id = ic.id)))\n             JOIN elements e ON ((p.element_code_id = e.id)))\n             JOIN flags f ON ((p.flag_id = f.id)))\n          WHERE (((e.element_code)::text = '5532'::text) AND ((f.flag)::text = 'A'::text) AND ((p.months_code)::text = '7021'::text))\n          GROUP BY ac.id, ac.area_code, ac.area, ic.item_code, ic.item, p.year\n        ), price_ratios AS (\n         SELECT p1.area_id AS country1_id,\n            p1.area_code AS country1_code,\n            p1.country_name AS country1,\n            p2.area_id AS country2_id,\n            p2.area_code AS country2_code,\n            p2.country_name AS country2,\n            p1.item_code,\n            p1.item_name,\n            p1.year,\n            p1.price AS price1,\n            p2.price AS price2,\n            (p1.price / NULLIF(p2.price, (0)::double precision)) AS price_ratio\n           FROM (annual_prices p1\n             JOIN annual_prices p2 ON (((p1.year = p2.year) AND ((p1.item_code)::text = (p2.item_code)::text) AND ((p1.area_code)::text < (p2.area_code)::text))))\n        )\n SELECT country1,\n    country2,\n    country1_id,\n    country2_id,\n    country1_code,\n    country2_code,\n    item_code,\n    item_name,\n    json_agg(json_build_object('year', year, 'price1', price1, 'price2', price2, 'ratio', round((price_ratio)::numeric, 3)) ORDER BY year) AS time_series,\n    count(*) AS years_compared,\n    round((avg(price_ratio))::numeric, 3) AS avg_ratio,\n    round((stddev(price_ratio))::numeric, 3) AS ratio_volatility,\n    round((min(price_ratio))::numeric, 3) AS min_ratio,\n    round((max(price_ratio))::numeric, 3) AS max_ratio,\n        CASE\n            WHEN (stddev(price_ratio) < (0.1)::double precision) THEN 'high'::text\n            WHEN (stddev(price_ratio) < (0.2)::double precision) THEN 'moderate'::text\n            WHEN (stddev(price_ratio) < (0.3)::double precision) THEN 'low'::text\n            ELSE 'none'::text\n        END AS integration_level\n   FROM price_ratios\n  GROUP BY country1, country2, country1_id, country2_id, country1_code, country2_code, item_code, item_name",
                with_data=True
            )

    op.replace_entity(public_price_ratios_usd)
    # ### end Alembic commands ###
