name: Deploy Food Data API (OIDC)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # Required for OIDC
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: food-data-api
  APP_RUNNER_SERVICE: food-data-api

jobs:
  deploy:
    name: Deploy to AWS App Runner
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug GitHub OIDC Claims
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"
        echo "Expected sub claim: repo:${{ github.repository }}:ref:${{ github.ref }}"
        echo "Trust policy expects: repo:MickeyJ/*"

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::814437249083:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push both tagged and latest images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI for next step
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update App Runner service
      run: |
        # Trigger App Runner deployment with new image
        aws apprunner start-deployment \
          --service-arn $(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)

    - name: Wait for deployment to complete
      run: |
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        
        echo "Waiting for App Runner service to update..."
        aws apprunner wait service-updated --service-arn $SERVICE_ARN
        
        # Get the service URL
        SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
        echo "ðŸš€ Deployment complete! API available at: https://$SERVICE_URL"

    - name: Test deployment
      run: |
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
        
        # Test health endpoint
        echo "Testing API health..."
        curl -f https://$SERVICE_URL/ || exit 1
        
        # Test data endpoint
        echo "Testing data overview..."
        curl -f https://$SERVICE_URL/data/overview || exit 1
        
        echo "âœ… All tests passed!"