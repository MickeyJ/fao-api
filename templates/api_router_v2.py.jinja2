from fastapi import APIRouter, Depends, Query, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import select, func, or_, text
from typing import Optional
from {{ project_name }}.src.db.database import get_db
from {{ project_name }}.src.db.pipelines.{{ router.pipeline_name }}.{{ router.name }}_model import {{ router.model.model_name }}
{% if router.model.foreign_keys %}
# Import core/lookup tables for joins
{% set imported_tables = [] %}
{% for fk in router.model.foreign_keys %}
{% if fk.table_name not in imported_tables %}
from {{ project_name }}.src.db.pipelines.{{ fk.pipeline_name }}.{{ fk.table_name}}_model import {{ fk.model_name }}
{% set _ = imported_tables.append(fk.table_name) %}
{% endif %}
{% endfor %}
{% endif %}

router = APIRouter(
    prefix="/{{ router.name }}",
    tags=["{{ router.name }}"],
    responses={404: {"description": "Not found"}},
)

@router.get("/")
def get_{{ router.name }}(
    limit: int = Query(100, le=1000, ge=1, description="Maximum records to return"),
    offset: int = Query(0, ge=0, description="Number of records to skip"),
    {% for fk in router.model.foreign_keys %}
    {{ fk.sql_column_name }}: Optional[str] = Query(None, description="Filter by {{ fk.table_name }} code"),
        {% if fk.lookup_description_column %}
    {{ fk.lookup_description_column }}: Optional[str] = Query(None, description="Filter by {{ fk.table_name }} description"),
        {% endif %}
    {% endfor %}
    include_all_lookup_columns: bool = Query(False, description="Include all columns from lookup tables"),
    db: Session = Depends(get_db)
):
    """
    Get {{ router.name.replace('_', ' ') }} data with filters.
    
    Filter options:
    {% for fk in router.model.foreign_keys %}
    - {{ fk.sql_column_name }}: Filter by {{ fk.table_name }} code
        {% if fk.lookup_description_column %}
    - {{ fk.lookup_description_column }}: Filter by {{ fk.table_name }} description (partial match)
        {% endif %}
    {% endfor %}
    - year: Exact year
    - year_min/year_max: Year range
    """
    
    # Build column list for select
    columns = []
    
    # Add all main table columns (except system columns)
    for col in {{ router.model.model_name }}.__table__.columns:
        if col.name not in ['id', 'created_at', 'updated_at']:
            columns.append(col)
    
    {% if router.model.foreign_keys %}
    # Add lookup table columns
    {% for fk in router.model.foreign_keys %}
    if include_all_lookup_columns:
        # Add all lookup columns
        for col in {{ fk.model_name }}.__table__.columns:
            if col.name not in ['id', 'created_at', 'updated_at', 'source_dataset']:
                columns.append(col.label(f"{{ fk.table_name }}_{col.name}"))
    else:
        # Just key columns
        columns.append({{ fk.model_name }}.{{ fk.sql_column_name }}.label("{{ fk.table_name }}_{{ fk.sql_column_name }}"))
        {% if fk.lookup_description_column %}
        columns.append({{ fk.model_name }}.{{ fk.lookup_description_column }}.label("{{ fk.table_name }}_{{ fk.lookup_description_column }}"))
        {% endif %}
        {% for col in fk.lookup_additional_columns %}
        columns.append({{ fk.model_name }}.{{ col }}.label("{{ fk.table_name }}_{{ col }}"))
        {% endfor %}
    {% endfor %}
    {% endif %}
    
    # Build query
    query = select(*columns).select_from({{ router.model.model_name }})
    
    {% if router.model.foreign_keys %}
    # Add joins
    {% for fk in router.model.foreign_keys %}
    query = query.outerjoin({{ fk.model_name }}, {{ router.model.model_name }}.{{ fk.hash_fk_sql_column_name }} == {{ fk.model_name }}.id)
    {% endfor %}
    {% endif %}
    
    # Get total count
    count_query = select(func.count()).select_from({{ router.model.model_name }})
    total_count = db.execute(count_query).scalar()
    
    # Apply pagination and execute
    query = query.offset(offset).limit(limit)
    results = db.execute(query).mappings().all()
    
    return {
        "total_count": total_count,
        "limit": limit,
        "offset": offset,
        "data": [dict(row) for row in results]
    }

{% if router.model.foreign_keys %}
# Metadata endpoints for understanding the dataset
    {% for fk in router.model.foreign_keys %}
        {% if fk.table_name == 'item_codes' %}
@router.get("/items")
def get_available_items(db: Session = Depends(get_db)):
    """Get all items available in this dataset with record counts"""
    query = (
        select(
            ItemCodes.item_code,
            ItemCodes.item,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .join({{ router.model.model_name }}, ItemCodes.id == {{ router.model.model_name }}.item_code_id)
        .group_by(ItemCodes.item_code, ItemCodes.item)
        .order_by(func.count({{ router.model.model_name }}.id).desc())
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_items": len(results),
        "items": [
            {
                "item_code": r.item_code,
                "item": r.item,
                "record_count": r.record_count
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'area_codes' %}
@router.get("/areas")
def get_available_areas(db: Session = Depends(get_db)):
    """Get all areas with data in this dataset"""
    query = (
        select(
            AreaCodes.area_code,
            AreaCodes.area,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .join({{ router.model.model_name }}, AreaCodes.id == {{ router.model.model_name }}.area_code_id)
        .group_by(AreaCodes.area_code, AreaCodes.area)
        .order_by(func.count({{ router.model.model_name }}.id).desc())
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_areas": len(results),
        "areas": [
            {
                "area_code": r.area_code,
                "area": r.area,
                "record_count": r.record_count
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'elements' %}
@router.get("/elements")
def get_available_elements(db: Session = Depends(get_db)):
    """Get all elements (measures/indicators) in this dataset"""
    query = (
        select(
            Elements.element_code,
            Elements.element,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .join({{ router.model.model_name }}, Elements.id == {{ router.model.model_name }}.element_code_id)
        .group_by(Elements.element_code, Elements.element)
        .order_by(func.count({{ router.model.model_name }}.id).desc())
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_elements": len(results),
        "elements": [
            {
                "element_code": r.element_code,
                "element": r.element,
                "record_count": r.record_count
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'flags' %}
@router.get("/flags")
def get_data_quality_summary(db: Session = Depends(get_db)):
    """Get data quality flag distribution for this dataset"""
    query = (
        select(
            Flags.flag,
            Flags.description,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .join({{ router.model.model_name }}, Flags.id == {{ router.model.model_name }}.flag_id)
        .group_by(Flags.flag, Flags.description)
        .order_by(func.count({{ router.model.model_name }}.id).desc())
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_records": sum(r.record_count for r in results),
        "flag_distribution": [
            {
                "flag": r.flag,
                "description": r.description,
                "record_count": r.record_count,
                "percentage": round(r.record_count / sum(r2.record_count for r2 in results) * 100, 2)
            }
            for r in results
        ]
    }
        {% endif %}
    {% endfor %}

@router.get("/years")
def get_temporal_coverage(db: Session = Depends(get_db)):
    """Get temporal coverage information for this dataset"""
    # Get year range and counts
    query = (
        select(
            {{ router.model.model_name }}.year,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .group_by({{ router.model.model_name }}.year)
        .order_by({{ router.model.model_name }}.year)
    )
    
    results = db.execute(query).all()
    years_data = [{"year": r.year, "record_count": r.record_count} for r in results]
    
    if not years_data:
        return {"dataset": "{{ router.name }}", "message": "No temporal data available"}
    
    return {
        "dataset": "{{ router.name }}",
        "earliest_year": min(r["year"] for r in years_data),
        "latest_year": max(r["year"] for r in years_data),
        "total_years": len(years_data),
        "total_records": sum(r["record_count"] for r in years_data),
        "years": years_data
    }

@router.get("/summary")
def get_dataset_summary(db: Session = Depends(get_db)):
    """Get comprehensive summary of this dataset"""
    total_records = db.query(func.count({{ router.model.model_name }}.id)).scalar()
    
    summary = {
        "dataset": "{{ router.name }}",
        "total_records": total_records,
        "foreign_keys": [
            {% for fk in router.model.foreign_keys %}
            "{{ fk.table_name }}",
            {% endfor %}
        ]
    }
    
    # Add counts for each FK relationship
    {% for fk in router.model.foreign_keys %}
        {% if fk.table_name == 'area_codes' %}
    summary["unique_areas"] = db.query(func.count(func.distinct({{ router.model.model_name }}.area_code_id))).scalar()
        {% elif fk.table_name == 'item_codes' %}
    summary["unique_items"] = db.query(func.count(func.distinct({{ router.model.model_name }}.item_code_id))).scalar()
        {% elif fk.table_name == 'elements' %}
    summary["unique_elements"] = db.query(func.count(func.distinct({{ router.model.model_name }}.element_code_id))).scalar()
        {% endif %}
    {% endfor %}
    
    return summary
{% endif %}